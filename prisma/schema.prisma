// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}



model Billboard {
  id            String @id @default(uuid())
  label         String
  imageUrl      String
  categories    Category[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt


}

model Category {
  id            String @id @default(uuid())
  billboardId   String
  billboard     Billboard @relation(fields: [billboardId], references: [id])
  products      Product[] @relation("CategoryToProduct")
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  
  @@index([billboardId])
}

model Size {
  id            String @id @default(uuid())
  name          String
  value         String
  products      Product[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}

model Color {
  id            String @id @default(uuid())
  name          String
  value         String
  products      Product[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}

model Product {
  id            String @id @default(uuid())
  categoryId    String
  category      Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name          String
  price         Decimal
  isFeatured    Boolean @default(false)
  isArchived    Boolean @default(false)
  sizeId        String
  size          Size @relation(fields: [sizeId], references: [id])
  colorId       String
  color         Color @relation(fields: [colorId], references: [id])
  images        Image[]
  orderItems    OrderItem[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

 
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id            String @id @default(uuid())
  url           String
  productId     String
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([productId])  
}

model Order {
  id            String @id @default(uuid())
  orderItems    OrderItem[]
  isPaid        Boolean @default(false)
  phone         String @default("")
  address       String @default("")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OrderItem {
  id            String @id @default(uuid())
  orderId       String
  order         Order @relation(fields: [orderId], references: [id])
  productId     String
  product       Product @relation(fields: [productId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}